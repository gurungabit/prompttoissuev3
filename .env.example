# Local Postgres (via docker-compose)
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=app
POSTGRES_SSL=false

# AI Providers
# GOOGLE_API_KEY=your_google_key
# OPENAI_API_KEY=your_openai_key

# AIDE (Enterprise) â€” either set AIDE_API_KEY directly, or let the app
# fetch it via Entra ID client credentials with the vars below.
# AIDE_API_KEY=your_static_aide_token

# Entra ID (Azure AD) client credentials to mint AIDE_API_KEY at runtime
# AIDE_ENTRA_TENANT_ID=your_tenant_id
# AIDE_ENTRA_CLIENT_ID=your_client_id
# AIDE_ENTRA_CLIENT_SECRET=your_client_secret
# AIDE_ENTRA_SCOPE=https://your-aide-resource/.default

# AIDE provider specifics
# AIDE_USE_CASE_ID=your_use_case
# AIDE_SOLMA_ID=your_solma
# AIDE_BASE_URL=https://api.aide.domain

# Optional single URL form
# DATABASE_URL=postgres://postgres:postgres@localhost:5432/app

# MCP (GitLab server via STDIO)
# Enable MCP GitLab integration for AI tool calling
# MCP_GITLAB_ENABLED=true

# Command to start the MCP server (default resolves to local tsx)
# MCP_GITLAB_CMD=node_modules/.bin/tsx

# Arguments for the command (default: src/mcp/gitlab/index.ts)
# MCP_GITLAB_ARGS=src/mcp/gitlab/index.ts

# Optional working directory for the server process
# MCP_GITLAB_CWD=.

# GitLab API config used by the MCP server
# GITLAB_HOST=https://gitlab.com
# GITLAB_TOKEN=your_gitlab_token

# GitLab OAuth Configuration
# GITLAB_OAUTH_CLIENT_ID=your_gitlab_application_id
# GITLAB_OAUTH_CLIENT_SECRET=your_gitlab_application_secret
# GITLAB_OAUTH_REDIRECT_URI=http://localhost:3000/api/auth/gitlab/callback
# NEXTAUTH_SECRET=your_random_secret_for_sessions
